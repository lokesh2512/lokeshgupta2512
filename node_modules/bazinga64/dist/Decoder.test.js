"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const bazinga64 = require("./index");
const TestValues_1 = require("./test/TestValues");
const fixtures = require('./test/fixtures.json');
describe('fromBase64', () => {
    it('decodes arrays', () => {
        const decoded = bazinga64.Decoder.fromBase64(TestValues_1.helloEncodedArray);
        const arrayBufferView = new Uint8Array(TestValues_1.helloDecodedArray);
        expect(decoded.asBytes).toEqual(arrayBufferView);
        expect(decoded.asString).toBe(TestValues_1.helloDecodedString);
    });
    it('does not decode from an array with an invalid length', () => {
        expect(() => {
            bazinga64.Decoder.fromBase64(TestValues_1.helloDecodedArray);
        }).toThrowError('Invalid string. Length must be a multiple of 4.');
    });
    it('decodes into a byte array', () => {
        const decoded = bazinga64.Decoder.fromBase64(TestValues_1.helloEncodedString);
        const arrayBufferView = new Uint8Array(TestValues_1.helloDecodedArray);
        expect(decoded.asBytes).toEqual(arrayBufferView);
        expect(decoded.asString).toBe(TestValues_1.helloDecodedString);
    });
    it('decodes into a string', () => {
        const encoded = 'SGVsbG8sIHdvcmxk';
        const decoded = bazinga64.Decoder.fromBase64(encoded);
        expect(decoded.asString).toBe('Hello, world');
    });
    it('decodes numbers', () => {
        const decoded = bazinga64.Decoder.fromBase64(TestValues_1.numberEncoded);
        expect(decoded.asString).toBe('1337');
    });
    it('sanitizes characters not found in the Base64 alphabet (according to RFC 2045).', () => {
        const firstLine = 'owABAaEAWEASf22tK9iQp8my5sgvtK8qiURy+5aCBglRKYLuwTlDYVBeAyydEVNDHd+pPoqvt1Es';
        const secondLine = '4zfU8cH1ccO02+4kfgoaAqEAoQBYIFBeAyydEVNDHd+pPoqvt1Es4zfU8cH1ccO02+4kfgoa';
        // RFC 2045: The encoded output stream must be represented in lines of no more than 76 characters each.
        let encoded = `${firstLine}\r\n${secondLine}`;
        let bytes = bazinga64.Decoder.fromBase64(encoded).asBytes;
        expect(bytes.byteLength).toBeDefined();
        encoded = `${firstLine}${secondLine}:`;
        bytes = bazinga64.Decoder.fromBase64(encoded).asBytes;
        expect(bytes.byteLength).toBeDefined();
        encoded = `${firstLine}${secondLine}.`;
        bytes = bazinga64.Decoder.fromBase64(encoded).asBytes;
        expect(bytes.byteLength).toBeDefined();
        encoded = `${firstLine}${secondLine}!`;
        bytes = bazinga64.Decoder.fromBase64(encoded).asBytes;
        expect(bytes.byteLength).toBeDefined();
        encoded = `${firstLine}\\${secondLine}!`;
        bytes = bazinga64.Decoder.fromBase64(encoded).asBytes;
        expect(bytes.byteLength).toBeDefined();
    });
    it('decodes very long strings.', () => __awaiter(void 0, void 0, void 0, function* () {
        const encoded = fixtures.files['yaoqi-lai-21901-unsplash_800.jpg'];
        const bytes = bazinga64.Decoder.fromBase64(encoded).asBytes;
        expect(bytes instanceof Uint8Array).toBe(true);
        expect(bytes.byteLength).toBeGreaterThan(0);
    }));
});
//# sourceMappingURL=Decoder.test.js.map