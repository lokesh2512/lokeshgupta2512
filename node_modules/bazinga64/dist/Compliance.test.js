"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _sodium = require("libsodium-wrappers-sumo");
const bazinga64 = require("./index");
let sodium;
beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
    yield _sodium.ready;
    sodium = _sodium;
}));
describe('decode Base64', () => {
    it('is compliant with libsodium on short sequences', () => {
        const encoded = 'SGVsbG8=';
        const decodedWithBazinga64 = bazinga64.Decoder.fromBase64(encoded).asBytes;
        const decodedWithSodium = sodium.from_base64(encoded, sodium.base64_variants.ORIGINAL);
        expect(decodedWithBazinga64).toEqual(decodedWithSodium);
    });
    it('is compliant with libsodium on long sequences', () => {
        const encoded = 'pQABARn//wKhAFgg5fwzzahXsFp99ChcRC0/0qIr4vLCujkcRSOkziiTz8gDoQChAFggaK10DY60iH38gbXc9GoOrv+SqQ0p3AEsR0WjHQLkV5kE9g==';
        const decodedWithBazinga64 = bazinga64.Decoder.fromBase64(encoded).asBytes;
        const decodedWithSodium = sodium.from_base64(encoded, sodium.base64_variants.ORIGINAL);
        expect(decodedWithBazinga64).toEqual(decodedWithSodium);
    });
});
//# sourceMappingURL=Compliance.test.js.map