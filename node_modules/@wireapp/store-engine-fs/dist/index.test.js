"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const store_engine_1 = require("@wireapp/store-engine");
const createSpec_1 = require("@wireapp/store-engine/dist/commonjs/test/createSpec");
const deleteAllSpec_1 = require("@wireapp/store-engine/dist/commonjs/test/deleteAllSpec");
const deleteSpec_1 = require("@wireapp/store-engine/dist/commonjs/test/deleteSpec");
const purgeSpec_1 = require("@wireapp/store-engine/dist/commonjs/test/purgeSpec");
const readAllPrimaryKeysSpec_1 = require("@wireapp/store-engine/dist/commonjs/test/readAllPrimaryKeysSpec");
const readAllSpec_1 = require("@wireapp/store-engine/dist/commonjs/test/readAllSpec");
const readSpec_1 = require("@wireapp/store-engine/dist/commonjs/test/readSpec");
const updateOrCreateSpec_1 = require("@wireapp/store-engine/dist/commonjs/test/updateOrCreateSpec");
const updateSpec_1 = require("@wireapp/store-engine/dist/commonjs/test/updateSpec");
const index_1 = require("./index");
describe('FileEngine', () => {
    const BASE_DIRECTORY = path_1.default.join(process.cwd(), '.tmp');
    const STORE_NAME = 'the-simpsons';
    const TEST_DIRECTORY = path_1.default.join(BASE_DIRECTORY, STORE_NAME);
    let engine;
    function initEngine(shouldCreateNewEngine = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const storeEngine = shouldCreateNewEngine ? new index_1.FileEngine(BASE_DIRECTORY) : engine;
            yield storeEngine.init(STORE_NAME);
            return storeEngine;
        });
    }
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        index_1.FileEngine.path = path_1.default;
        engine = yield initEngine();
    }));
    afterEach(() => __awaiter(void 0, void 0, void 0, function* () { return fs_extra_1.default.remove(TEST_DIRECTORY); }));
    describe('enforcePathRestrictions', () => {
        const enforcePathRestrictions = (givenTrustedRoot, givenPath) => () => index_1.FileEngine.enforcePathRestrictions(givenTrustedRoot, givenPath);
        const expectedError = store_engine_1.error.PathValidationError;
        const unixFolder = '/home/marge/test/';
        const windowsFolder = 'C:\\Users\\bart\\Documents\\Database\\';
        it('allows dots inside of primary keys.', () => {
            const tableName = 'amplify';
            const primaryKey = 'z.storage.StorageKey.EVENT.LAST_DATE';
            index_1.FileEngine.path = path_1.default.posix;
            const actual = index_1.FileEngine.enforcePathRestrictions(index_1.FileEngine.path.join(unixFolder, tableName), primaryKey);
            expect(actual).toBeDefined();
        });
        it('allows slashes inside of primary keys as long as they do not navigate outside of the base folder.', () => {
            index_1.FileEngine.path = path_1.default.posix;
            expect(index_1.FileEngine.enforcePathRestrictions(unixFolder, 'users/..')).toBeDefined();
            expect(index_1.FileEngine.enforcePathRestrictions(unixFolder, 'users/../')).toBeDefined();
            expect(index_1.FileEngine.enforcePathRestrictions(unixFolder, 'users/../sandbox')).toBeDefined();
            expect(index_1.FileEngine.enforcePathRestrictions(unixFolder, 'users/me')).toBeDefined();
            expect(index_1.FileEngine.enforcePathRestrictions(unixFolder, 'a/b/c/d/e/f/g/../../../../ok')).toBeDefined();
            expect(index_1.FileEngine.enforcePathRestrictions(unixFolder, 'a/b/c/../../../')).toBeDefined();
            expect(enforcePathRestrictions(unixFolder, 'a/b/c/../../../../')).toThrowError(expectedError);
        });
        it('allows empty strings.', () => {
            const tableName = 'amplify';
            const primaryKey = '';
            index_1.FileEngine.path = path_1.default.posix;
            const actual = index_1.FileEngine.enforcePathRestrictions(index_1.FileEngine.path.join(unixFolder, tableName), primaryKey);
            expect(actual).toBeDefined();
        });
        it('throws errors on path traversals.', () => {
            index_1.FileEngine.path = path_1.default.win32;
            expect(enforcePathRestrictions(windowsFolder, 'malicious\\..\\..\\test\\..\\..')).toThrowError(expectedError);
            expect(enforcePathRestrictions(windowsFolder, '\\malicious\\..\\\\..entry\\..\\..')).toThrowError(expectedError);
            expect(enforcePathRestrictions(windowsFolder, 'malicious\\..\\entry\\..\\..')).toThrowError(expectedError);
            expect(enforcePathRestrictions(windowsFolder, '\\\\server\\..\\..\\..')).toThrowError(expectedError);
            expect(enforcePathRestrictions(windowsFolder, 'malicious\\..\\..\\entry\\..\\')).toThrowError(expectedError);
            expect(enforcePathRestrictions(windowsFolder, '..\\etc')).toThrowError(expectedError);
            index_1.FileEngine.path = path_1.default.posix;
            expect(enforcePathRestrictions(unixFolder, '../etc')).toThrowError(expectedError);
            expect(enforcePathRestrictions(unixFolder, '/malicious/../../../entry/../test')).toThrowError(expectedError);
            expect(enforcePathRestrictions(unixFolder, 'malicious/../../../entry/..')).toThrowError(expectedError);
            expect(enforcePathRestrictions(unixFolder, 'documents/../../../../../etc/hosts')).toThrowError(expectedError);
            expect(enforcePathRestrictions(unixFolder, 'malicious/../../../entry/../')).toThrowError(expectedError);
            expect(enforcePathRestrictions(unixFolder, '../etc')).toThrowError(expectedError);
            expect(enforcePathRestrictions(unixFolder, 'users/../../tigris')).toThrowError(expectedError);
            expect(enforcePathRestrictions(unixFolder, 'users/../tigris/../../')).toThrowError(expectedError);
        });
        it('throws errors when attempting to use the root folder as a trusted root.', () => {
            index_1.FileEngine.path = path_1.default.posix;
            expect(enforcePathRestrictions('/', 'etc/hosts')).toThrowError(expectedError);
            index_1.FileEngine.path = path_1.default.win32;
            expect(enforcePathRestrictions('C:/', '\\Windows\\System32\\drivers\\etc\\hosts')).toThrowError(expectedError);
        });
        it('is applied to all store operations.', () => __awaiter(void 0, void 0, void 0, function* () {
            const functionNames = [
                'create',
                'delete',
                'deleteAll',
                'read',
                'readAll',
                'readAllPrimaryKeys',
                'update',
                'updateOrCreate',
            ];
            for (const operation of functionNames) {
                try {
                    yield engine[operation]('../etc', 'primary-key', {});
                    fail();
                }
                catch (error) {
                    expect(error instanceof expectedError).toBe(true);
                }
            }
        }));
    });
    describe('init', () => {
        it('resolves with the directory to which the records will be saved.', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = {
                fileExtension: '.json',
            };
            engine = new index_1.FileEngine(BASE_DIRECTORY);
            const directory = yield engine.init(STORE_NAME, options);
            const fileStatus = fs_extra_1.default.statSync(directory);
            expect(fileStatus.isDirectory()).toBe(true);
        }));
    });
    describe('create', () => {
        describe('create', () => {
            Object.entries(createSpec_1.createSpec).map(([description, testFunction]) => {
                it(description, () => testFunction(engine));
            });
        });
        it('accepts custom file extensions.', () => __awaiter(void 0, void 0, void 0, function* () {
            const options = {
                fileExtension: '.json',
            };
            engine = new index_1.FileEngine(BASE_DIRECTORY);
            yield engine.init(STORE_NAME, options);
            expect(engine.options.fileExtension).toBe(options.fileExtension);
        }));
    });
    describe('delete', () => {
        Object.entries(deleteSpec_1.deleteSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
    describe('deleteAll', () => {
        Object.entries(deleteAllSpec_1.deleteAllSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
    describe('purge', () => {
        Object.entries(purgeSpec_1.purgeSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine, initEngine));
        });
    });
    describe('readAllPrimaryKeys', () => {
        Object.entries(readAllPrimaryKeysSpec_1.readAllPrimaryKeysSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
    describe('readAll', () => {
        Object.entries(readAllSpec_1.readAllSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
    describe('read', () => {
        Object.entries(readSpec_1.readSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
    describe('updateOrCreate', () => {
        Object.entries(updateOrCreateSpec_1.updateOrCreateSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
    describe('update', () => {
        Object.entries(updateSpec_1.updateSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
});
//# sourceMappingURL=index.test.js.map