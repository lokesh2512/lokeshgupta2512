"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ed2curve = require("ed2curve");
const _sodium = require("libsodium-wrappers-sumo");
const ClassUtil = require("../util/ClassUtil");
const PublicKey_1 = require("./PublicKey");
const SecretKey_1 = require("./SecretKey");
const InputError_1 = require("../errors/InputError");
/** Construct an ephemeral key pair. */
class KeyPair {
    constructor() {
        this.public_key = new PublicKey_1.PublicKey();
        this.secret_key = new SecretKey_1.SecretKey();
    }
    static new() {
        return __awaiter(this, void 0, void 0, function* () {
            yield _sodium.ready;
            const sodium = _sodium;
            const ed25519_key_pair = sodium.crypto_sign_keypair();
            const kp = ClassUtil.new_instance(KeyPair);
            kp.secret_key = KeyPair.prototype._construct_private_key(ed25519_key_pair);
            kp.public_key = KeyPair.prototype._construct_public_key(ed25519_key_pair);
            return kp;
        });
    }
    /**
     * Ed25519 keys can be converted to Curve25519 keys, so that the same key pair can be
     * used both for authenticated encryption (`crypto_box`) and for signatures (`crypto_sign`).
     * @param ed25519_key_pair Key pair based on Edwards-curve (Ed25519)
     * @returns Constructed private key
     * @see https://download.libsodium.org/doc/advanced/ed25519-curve25519.html
     */
    _construct_private_key(ed25519_key_pair) {
        const sk_ed25519 = ed25519_key_pair.privateKey;
        const sk_curve25519 = ed2curve.convertSecretKey(sk_ed25519);
        if (sk_curve25519) {
            return SecretKey_1.SecretKey.new(sk_ed25519, sk_curve25519);
        }
        throw new InputError_1.InputError.ConversionError('Could not convert private key with ed2curve.', 409);
    }
    /**
     * @param ed25519_key_pair Key pair based on Edwards-curve (Ed25519)
     * @returns Constructed public key
     */
    _construct_public_key(ed25519_key_pair) {
        const pk_ed25519 = ed25519_key_pair.publicKey;
        const pk_curve25519 = ed2curve.convertPublicKey(pk_ed25519);
        if (pk_curve25519) {
            return PublicKey_1.PublicKey.new(pk_ed25519, pk_curve25519);
        }
        throw new InputError_1.InputError.ConversionError('Could not convert public key with ed2curve.', 408);
    }
    encode(encoder) {
        encoder.object(2);
        encoder.u8(0);
        this.secret_key.encode(encoder);
        encoder.u8(1);
        return this.public_key.encode(encoder);
    }
    static decode(decoder) {
        const self = ClassUtil.new_instance(KeyPair);
        const nprops = decoder.object();
        for (let index = 0; index <= nprops - 1; index++) {
            switch (decoder.u8()) {
                case 0:
                    self.secret_key = SecretKey_1.SecretKey.decode(decoder);
                    break;
                case 1:
                    self.public_key = PublicKey_1.PublicKey.decode(decoder);
                    break;
                default:
                    decoder.skip();
            }
        }
        return self;
    }
}
exports.KeyPair = KeyPair;
//# sourceMappingURL=KeyPair.js.map