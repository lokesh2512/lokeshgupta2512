"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const CBOR = require("@wireapp/cbor");
const ClassUtil = require("../util/ClassUtil");
const InputError_1 = require("../errors/InputError");
const KeyPair_1 = require("./KeyPair");
/**
 * Pre-generated (and regularly refreshed) pre-keys.
 * A Pre-Shared Key contains the public long-term identity and ephemeral handshake keys for the initial triple DH.
 */
class PreKey {
    constructor() {
        this.key_id = -1;
        this.key_pair = new KeyPair_1.KeyPair();
        this.version = -1;
    }
    static new(pre_key_id) {
        return __awaiter(this, void 0, void 0, function* () {
            this.validate_pre_key_id(pre_key_id);
            const pk = ClassUtil.new_instance(PreKey);
            pk.version = 1;
            pk.key_id = pre_key_id;
            pk.key_pair = yield KeyPair_1.KeyPair.new();
            return pk;
        });
    }
    static validate_pre_key_id(pre_key_id) {
        if (pre_key_id === undefined) {
            throw new InputError_1.InputError.TypeError('PreKey ID is undefined.', InputError_1.InputError.CODE.CASE_404);
        }
        if (typeof pre_key_id === 'string') {
            throw new InputError_1.InputError.TypeError(`PreKey ID "${pre_key_id}" is a string.`, InputError_1.InputError.CODE.CASE_403);
        }
        if (pre_key_id % 1 !== 0) {
            throw new InputError_1.InputError.TypeError(`PreKey ID "${pre_key_id}" is a floating-point number.`, InputError_1.InputError.CODE.CASE_403);
        }
        if (pre_key_id < 0 || pre_key_id > PreKey.MAX_PREKEY_ID) {
            const message = `PreKey ID (${pre_key_id}) must be between or equal to 0 and ${PreKey.MAX_PREKEY_ID}.`;
            throw new InputError_1.InputError.RangeError(message, InputError_1.InputError.CODE.CASE_400);
        }
    }
    static last_resort() {
        return PreKey.new(PreKey.MAX_PREKEY_ID);
    }
    static generate_prekeys(start, size) {
        return __awaiter(this, void 0, void 0, function* () {
            this.validate_pre_key_id(start);
            this.validate_pre_key_id(size);
            if (size === 0) {
                return [];
            }
            return Promise.all(Array.from({ length: size }).map((_, index) => PreKey.new((start + index) % PreKey.MAX_PREKEY_ID)));
        });
    }
    serialise() {
        const encoder = new CBOR.Encoder();
        this.encode(encoder);
        return encoder.get_buffer();
    }
    static deserialise(buf) {
        return PreKey.decode(new CBOR.Decoder(buf));
    }
    encode(encoder) {
        encoder.object(3);
        encoder.u8(0);
        encoder.u8(this.version);
        encoder.u8(1);
        encoder.u16(this.key_id);
        encoder.u8(2);
        return this.key_pair.encode(encoder);
    }
    static decode(decoder) {
        const self = ClassUtil.new_instance(PreKey);
        const nprops = decoder.object();
        for (let index = 0; index <= nprops - 1; index++) {
            switch (decoder.u8()) {
                case 0:
                    self.version = decoder.u8();
                    break;
                case 1:
                    self.key_id = decoder.u16();
                    break;
                case 2:
                    self.key_pair = KeyPair_1.KeyPair.decode(decoder);
                    break;
                default:
                    decoder.skip();
            }
        }
        return self;
    }
}
exports.PreKey = PreKey;
PreKey.MAX_PREKEY_ID = 0xffff;
//# sourceMappingURL=PreKey.js.map