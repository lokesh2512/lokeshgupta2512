"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const CBOR = require("@wireapp/cbor");
const ClassUtil = require("../util/ClassUtil");
const IdentityKey_1 = require("./IdentityKey");
const KeyPair_1 = require("./KeyPair");
const SecretKey_1 = require("./SecretKey");
class IdentityKeyPair {
    constructor() {
        this.public_key = new IdentityKey_1.IdentityKey();
        this.secret_key = new SecretKey_1.SecretKey();
        this.version = -1;
    }
    static new() {
        return __awaiter(this, void 0, void 0, function* () {
            const key_pair = yield KeyPair_1.KeyPair.new();
            const ikp = ClassUtil.new_instance(IdentityKeyPair);
            ikp.version = 1;
            ikp.secret_key = key_pair.secret_key;
            ikp.public_key = IdentityKey_1.IdentityKey.new(key_pair.public_key);
            return ikp;
        });
    }
    serialise() {
        const encoder = new CBOR.Encoder();
        this.encode(encoder);
        return encoder.get_buffer();
    }
    static deserialise(buf) {
        const decoder = new CBOR.Decoder(buf);
        return IdentityKeyPair.decode(decoder);
    }
    encode(encoder) {
        encoder.object(3);
        encoder.u8(0);
        encoder.u8(this.version);
        encoder.u8(1);
        this.secret_key.encode(encoder);
        encoder.u8(2);
        return this.public_key.encode(encoder);
    }
    static decode(decoder) {
        const self = ClassUtil.new_instance(IdentityKeyPair);
        const nprops = decoder.object();
        for (let index = 0; index <= nprops - 1; index++) {
            switch (decoder.u8()) {
                case 0:
                    self.version = decoder.u8();
                    break;
                case 1:
                    self.secret_key = SecretKey_1.SecretKey.decode(decoder);
                    break;
                case 2:
                    self.public_key = IdentityKey_1.IdentityKey.decode(decoder);
                    break;
                default:
                    decoder.skip();
            }
        }
        return self;
    }
}
exports.IdentityKeyPair = IdentityKeyPair;
//# sourceMappingURL=IdentityKeyPair.js.map