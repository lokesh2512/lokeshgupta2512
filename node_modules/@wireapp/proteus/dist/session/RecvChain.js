"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const PublicKey_1 = require("../keys/PublicKey");
const ClassUtil = require("../util/ClassUtil");
const DecryptError_1 = require("../errors/DecryptError");
const ProteusError_1 = require("../errors/ProteusError");
const ChainKey_1 = require("./ChainKey");
const MessageKeys_1 = require("./MessageKeys");
class RecvChain {
    constructor() {
        this.chain_key = new ChainKey_1.ChainKey();
        this.message_keys = [];
        this.ratchet_key = new PublicKey_1.PublicKey();
    }
    static new(chain_key, public_key) {
        const rc = ClassUtil.new_instance(RecvChain);
        rc.chain_key = chain_key;
        rc.ratchet_key = public_key;
        rc.message_keys = [];
        return rc;
    }
    try_message_keys(envelope, msg) {
        var _a;
        if (((_a = this.message_keys[0]) === null || _a === void 0 ? void 0 : _a.counter) > msg.counter) {
            const message = `Message too old. Counter for oldest staged chain key is '${this.message_keys[0].counter}' while message counter is '${msg.counter}'.`;
            throw new DecryptError_1.DecryptError.OutdatedMessage(message, DecryptError_1.DecryptError.CODE.CASE_208);
        }
        const idx = this.message_keys.findIndex(mk => {
            return mk.counter === msg.counter;
        });
        if (idx === -1) {
            throw new DecryptError_1.DecryptError.DuplicateMessage(undefined, DecryptError_1.DecryptError.CODE.CASE_209);
        }
        const mk = this.message_keys.splice(idx, 1)[0];
        if (!envelope.verify(mk.mac_key)) {
            const message = `Envelope verification failed for message with counter behind. Message index is '${msg.counter}' while receive chain index is '${this.chain_key.idx}'.`;
            throw new DecryptError_1.DecryptError.InvalidSignature(message, DecryptError_1.DecryptError.CODE.CASE_210);
        }
        return mk.decrypt(msg.cipher_text);
    }
    stage_message_keys(msg) {
        const num = msg.counter - this.chain_key.idx;
        if (num > RecvChain.MAX_COUNTER_GAP) {
            if (this.chain_key.idx === 0) {
                throw new DecryptError_1.DecryptError.TooDistantFuture('Skipped too many messages at the beginning of a receive chain.', DecryptError_1.DecryptError.CODE.CASE_211);
            }
            throw new DecryptError_1.DecryptError.TooDistantFuture(`Skipped too many messages within a used receive chain. Receive chain counter is '${this.chain_key.idx}'`, DecryptError_1.DecryptError.CODE.CASE_212);
        }
        const keys = [];
        let chk = this.chain_key;
        for (let index = 0; index <= num - 1; index++) {
            keys.push(chk.message_keys());
            chk = chk.next();
        }
        const mk = chk.message_keys();
        return [chk, mk, keys];
    }
    commit_message_keys(keys) {
        if (keys.length > RecvChain.MAX_COUNTER_GAP) {
            throw new ProteusError_1.ProteusError(`Number of message keys (${keys.length}) exceed message chain counter gap (${RecvChain.MAX_COUNTER_GAP}).`, ProteusError_1.ProteusError.CODE.CASE_103);
        }
        const excess = this.message_keys.length + keys.length - RecvChain.MAX_COUNTER_GAP;
        for (let index = 0; index <= excess - 1; index++) {
            this.message_keys.shift();
        }
        keys.map(key => this.message_keys.push(key));
        if (keys.length > RecvChain.MAX_COUNTER_GAP) {
            throw new ProteusError_1.ProteusError(`Skipped message keys which exceed the message chain counter gap (${RecvChain.MAX_COUNTER_GAP}).`, ProteusError_1.ProteusError.CODE.CASE_104);
        }
    }
    encode(encoder) {
        encoder.object(3);
        encoder.u8(0);
        this.chain_key.encode(encoder);
        encoder.u8(1);
        this.ratchet_key.encode(encoder);
        encoder.u8(2);
        encoder.array(this.message_keys.length);
        return this.message_keys.map(key => key.encode(encoder));
    }
    static decode(decoder) {
        const self = ClassUtil.new_instance(RecvChain);
        const nprops = decoder.object();
        for (let index = 0; index <= nprops - 1; index++) {
            switch (decoder.u8()) {
                case 0: {
                    self.chain_key = ChainKey_1.ChainKey.decode(decoder);
                    break;
                }
                case 1: {
                    self.ratchet_key = PublicKey_1.PublicKey.decode(decoder);
                    break;
                }
                case 2: {
                    self.message_keys = [];
                    let len = decoder.array();
                    while (len--) {
                        self.message_keys.push(MessageKeys_1.MessageKeys.decode(decoder));
                    }
                    break;
                }
                default: {
                    decoder.skip();
                }
            }
        }
        return self;
    }
}
exports.RecvChain = RecvChain;
RecvChain.MAX_COUNTER_GAP = 1000;
//# sourceMappingURL=RecvChain.js.map