"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const DerivedSecrets_1 = require("../derived/DerivedSecrets");
const MacKey_1 = require("../derived/MacKey");
const ClassUtil = require("../util/ClassUtil");
const MessageKeys_1 = require("./MessageKeys");
class ChainKey {
    constructor() {
        this.idx = -1;
        this.key = new MacKey_1.MacKey(new Uint8Array([]));
    }
    static from_mac_key(key, counter) {
        const ck = ClassUtil.new_instance(ChainKey);
        ck.key = key;
        ck.idx = counter;
        return ck;
    }
    next() {
        const ck = ClassUtil.new_instance(ChainKey);
        ck.key = new MacKey_1.MacKey(this.key.sign('1'));
        ck.idx = this.idx + 1;
        return ck;
    }
    message_keys() {
        const base = this.key.sign('0');
        const derived_secrets = DerivedSecrets_1.DerivedSecrets.kdf_without_salt(base, 'hash_ratchet');
        return MessageKeys_1.MessageKeys.new(derived_secrets.cipher_key, derived_secrets.mac_key, this.idx);
    }
    encode(encoder) {
        encoder.object(2);
        encoder.u8(0);
        this.key.encode(encoder);
        encoder.u8(1);
        return encoder.u32(this.idx);
    }
    static decode(decoder) {
        const self = ClassUtil.new_instance(ChainKey);
        const nprops = decoder.object();
        for (let index = 0; index <= nprops - 1; index++) {
            switch (decoder.u8()) {
                case 0:
                    self.key = MacKey_1.MacKey.decode(decoder);
                    break;
                case 1:
                    self.idx = decoder.u32();
                    break;
                default:
                    decoder.skip();
            }
        }
        return self;
    }
}
exports.ChainKey = ChainKey;
//# sourceMappingURL=ChainKey.js.map