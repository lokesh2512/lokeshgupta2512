"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CipherKey_1 = require("../derived/CipherKey");
const DerivedSecrets_1 = require("../derived/DerivedSecrets");
const InputError_1 = require("../errors/InputError");
const ClassUtil = require("../util/ClassUtil");
const ChainKey_1 = require("./ChainKey");
class RootKey {
    constructor() {
        this.key = new CipherKey_1.CipherKey();
    }
    /**
     * @param cipher_key Cipher key generated by derived secrets
     */
    static from_cipher_key(cipher_key) {
        const rk = ClassUtil.new_instance(RootKey);
        rk.key = cipher_key;
        return rk;
    }
    /**
     * @param ours Our key pair
     * @param theirs Their public key
     */
    dh_ratchet(ours, theirs) {
        const secret = ours.secret_key.shared_secret(theirs);
        const derived_secrets = DerivedSecrets_1.DerivedSecrets.kdf(secret, this.key.key, 'dh_ratchet');
        return [RootKey.from_cipher_key(derived_secrets.cipher_key), ChainKey_1.ChainKey.from_mac_key(derived_secrets.mac_key, 0)];
    }
    encode(encoder) {
        encoder.object(1);
        encoder.u8(0);
        return this.key.encode(encoder);
    }
    static decode(decoder) {
        let cipher_key = null;
        const nprops = decoder.object();
        for (let index = 0; index <= nprops - 1; index++) {
            switch (decoder.u8()) {
                case 0:
                    cipher_key = CipherKey_1.CipherKey.decode(decoder);
                    break;
                default:
                    decoder.skip();
            }
        }
        if (cipher_key) {
            return RootKey.from_cipher_key(cipher_key);
        }
        throw new InputError_1.InputError.TypeError(`Given RootKey doesn't match expected signature.`, InputError_1.InputError.CODE.CASE_407);
    }
}
exports.RootKey = RootKey;
//# sourceMappingURL=RootKey.js.map