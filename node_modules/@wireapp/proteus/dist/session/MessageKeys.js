"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const CipherKey_1 = require("../derived/CipherKey");
const MacKey_1 = require("../derived/MacKey");
const ClassUtil = require("../util/ClassUtil");
class MessageKeys {
    constructor() {
        this.cipher_key = new CipherKey_1.CipherKey();
        this.counter = -1;
        this.mac_key = new MacKey_1.MacKey(new Uint8Array([]));
    }
    static new(cipher_key, mac_key, counter) {
        const mk = ClassUtil.new_instance(MessageKeys);
        mk.cipher_key = cipher_key;
        mk.mac_key = mac_key;
        mk.counter = counter;
        return mk;
    }
    _counter_as_nonce() {
        const nonce = new ArrayBuffer(8);
        new DataView(nonce).setUint32(0, this.counter);
        return new Uint8Array(nonce);
    }
    encrypt(plaintext) {
        return this.cipher_key.encrypt(plaintext, this._counter_as_nonce());
    }
    decrypt(ciphertext) {
        return this.cipher_key.decrypt(ciphertext, this._counter_as_nonce());
    }
    encode(encoder) {
        encoder.object(3);
        encoder.u8(0);
        this.cipher_key.encode(encoder);
        encoder.u8(1);
        this.mac_key.encode(encoder);
        encoder.u8(2);
        return encoder.u32(this.counter);
    }
    static decode(decoder) {
        const self = ClassUtil.new_instance(MessageKeys);
        const nprops = decoder.object();
        for (let index = 0; index <= nprops - 1; index++) {
            switch (decoder.u8()) {
                case 0:
                    self.cipher_key = CipherKey_1.CipherKey.decode(decoder);
                    break;
                case 1:
                    self.mac_key = MacKey_1.MacKey.decode(decoder);
                    break;
                case 2:
                    self.counter = decoder.u32();
                    break;
                default:
                    decoder.skip();
            }
        }
        return self;
    }
}
exports.MessageKeys = MessageKeys;
//# sourceMappingURL=MessageKeys.js.map