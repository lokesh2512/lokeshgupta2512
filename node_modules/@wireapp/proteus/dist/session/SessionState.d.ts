import * as CBOR from '@wireapp/cbor';
import { IdentityKey } from '../keys/IdentityKey';
import { IdentityKeyPair } from '../keys/IdentityKeyPair';
import { KeyPair } from '../keys/KeyPair';
import { PreKeyBundle } from '../keys/PreKeyBundle';
import { PublicKey } from '../keys/PublicKey';
import { CipherMessage } from '../message/CipherMessage';
import { Envelope } from '../message/Envelope';
import { SessionTag } from '../message/SessionTag';
import { RecvChain } from './RecvChain';
import { RootKey } from './RootKey';
import { SendChain } from './SendChain';
export declare class SessionState {
    prev_counter: number;
    recv_chains: RecvChain[];
    root_key: RootKey;
    send_chain: SendChain;
    constructor();
    static init_as_alice(alice_identity_pair: IdentityKeyPair, alice_base: IdentityKeyPair | KeyPair, bob_pkbundle: PreKeyBundle): Promise<SessionState>;
    static init_as_bob(bob_ident: IdentityKeyPair, bob_prekey: KeyPair, alice_ident: IdentityKey, alice_base: PublicKey): SessionState;
    ratchet(ratchet_key: PublicKey): Promise<void>;
    /**
     * @param identity_key Public identity key of the local identity key pair
     * @param pending Pending pre-key
     * @param tag Session tag
     * @param plaintext The plaintext to encrypt
     */
    encrypt(identity_key: IdentityKey, pending: (number | PublicKey)[] | null, tag: SessionTag, plaintext: string | Uint8Array): Envelope;
    decrypt(envelope: Envelope, msg: CipherMessage): Promise<Uint8Array>;
    serialise(): ArrayBuffer;
    static deserialise(buf: ArrayBuffer): SessionState;
    encode(encoder: CBOR.Encoder): CBOR.Encoder;
    static decode(decoder: CBOR.Decoder): SessionState;
}
