"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const engine_1 = require("../engine");
const error_1 = require("../engine/error");
const TransientStore_1 = require("./TransientStore");
describe('store.TransientStore', () => {
    const STORE_NAME = 'database-name';
    const TABLE_NAME = 'table-name';
    let engine;
    let store;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        engine = new engine_1.MemoryEngine();
        yield engine.init(STORE_NAME);
        store = new TransientStore_1.TransientStore(engine);
        yield store.init(TABLE_NAME);
    }));
    afterEach(() => {
        window.localStorage.clear();
    });
    describe('set', () => {
        const entity = {
            access_token: 'iJCRCjc8oROO-dkrkqCXOade997oa8Jhbz6awMUQPBQo80VenWqp_oNvfY6AnU5BxEsdDPOBfBP-uz_b0gAKBQ==',
        };
        const primaryKey = 'access-tokens';
        const ttl = 1000;
        it("saves a record together with it's expiration date.", () => __awaiter(void 0, void 0, void 0, function* () {
            const bundle = yield store.set(primaryKey, entity, ttl);
            expect(bundle.expires).toEqual(jasmine.any(Number));
        }));
        it("saves a record together with it's timeoutID.", () => __awaiter(void 0, void 0, void 0, function* () {
            const bundle = yield store.set(primaryKey, entity, ttl);
            expect(bundle.timeoutID).toBeDefined();
        }));
        it("doesn't overwrite an existing record.", () => __awaiter(void 0, void 0, void 0, function* () {
            try {
                yield store.set(primaryKey, entity, ttl);
                yield store.set(primaryKey, { access_token: 'ABC' }, ttl);
                fail();
            }
            catch (error) {
                expect(error).toEqual(jasmine.any(error_1.RecordAlreadyExistsError));
                expect(error.code).toBe(1);
            }
        }));
    });
    describe('get', () => {
        const entity = {
            access_token: 'iJCRCjc8oROO-dkrkqCXOade997oa8Jhbz6awMUQPBQo80VenWqp_oNvfY6AnU5BxEsdDPOBfBP-uz_b0gAKBQ==',
        };
        const ttl = 900;
        it("returns a saved record together with it's expiration.", () => __awaiter(void 0, void 0, void 0, function* () {
            const primaryKey = 'access-tokens';
            yield store.set(primaryKey, entity, ttl);
            const bundle = yield store.get(primaryKey);
            if (bundle) {
                expect(bundle.payload).toEqual(entity);
            }
            else {
                fail();
            }
        }));
        it(`returns a saved record with an "@" in it's primary key.`, () => __awaiter(void 0, void 0, void 0, function* () {
            const primaryKey = '@access@tokens';
            yield store.set(primaryKey, entity, ttl);
            const bundle = yield store.get(primaryKey);
            if (bundle) {
                expect(bundle.payload).toEqual(entity);
            }
            else {
                fail();
            }
        }));
        it('returns a non-existent record as "undefined".', () => __awaiter(void 0, void 0, void 0, function* () {
            const primaryKey = 'not-existing';
            const bundle = yield store.get(primaryKey);
            expect(bundle).toBeUndefined();
        }));
    });
    describe('deleteFromCache', () => {
        it("doesn't fail when deleting non-existent records.", () => {
            const cacheKey = 'non-existent';
            const deletedCacheKey = store.deleteFromCache(cacheKey);
            expect(deletedCacheKey).toBe(cacheKey);
        });
    });
    describe('startTimer', () => {
        const entity = {
            access_token: 'iJCRCjc8oROO-dkrkqCXOade997oa8Jhbz6awMUQPBQo80VenWqp_oNvfY6AnU5BxEsdDPOBfBP-uz_b0gAKBQ==',
        };
        const primaryKey = 'access-tokens';
        const minuteInMillis = 60000;
        beforeEach(() => {
            jasmine.clock().install();
            jasmine.clock().mockDate();
        });
        afterEach(() => jasmine.clock().uninstall());
        it('publishes an event when an entity expires.', (done) => __awaiter(void 0, void 0, void 0, function* () {
            store.on(TransientStore_1.TransientStore.TOPIC.EXPIRED, expiredBundle => {
                expect(expiredBundle.payload).toBe(entity);
                expect(expiredBundle.primaryKey).toBe(primaryKey);
                done();
            });
            yield store.set(primaryKey, entity, minuteInMillis);
            jasmine.clock().tick(minuteInMillis + 1);
        }));
        it('deletes expired entities.', () => __awaiter(void 0, void 0, void 0, function* () {
            yield store.set(primaryKey, entity, minuteInMillis);
            jasmine.clock().tick(minuteInMillis + 1);
            const bundle = yield store.get(primaryKey);
            expect(bundle).toBeUndefined();
        }));
        it('keeps the same timer when being called multiple times.', () => __awaiter(void 0, void 0, void 0, function* () {
            const bundle = yield store.set(primaryKey, entity, minuteInMillis);
            const timeoutID = bundle.timeoutID;
            const cacheKey = store['constructCacheKey'](primaryKey);
            const newBundle = yield store['startTimer'](cacheKey);
            expect(newBundle.timeoutID).toBe(timeoutID);
        }));
    });
});
//# sourceMappingURL=TransientStore.test.browser.js.map