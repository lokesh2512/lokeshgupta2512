"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const createSpec_1 = require("../test/createSpec");
const deleteAllSpec_1 = require("../test/deleteAllSpec");
const deleteSpec_1 = require("../test/deleteSpec");
const purgeSpec_1 = require("../test/purgeSpec");
const readAllPrimaryKeysSpec_1 = require("../test/readAllPrimaryKeysSpec");
const readAllSpec_1 = require("../test/readAllSpec");
const readSpec_1 = require("../test/readSpec");
const updateOrCreateSpec_1 = require("../test/updateOrCreateSpec");
const updateSpec_1 = require("../test/updateSpec");
const MemoryEngine_1 = require("./MemoryEngine");
const STORE_NAME = 'store-name';
let engine;
function initEngine(shouldCreateNewEngine = true) {
    return __awaiter(this, void 0, void 0, function* () {
        const storeEngine = shouldCreateNewEngine ? new MemoryEngine_1.MemoryEngine() : engine;
        yield storeEngine.init(STORE_NAME);
        return storeEngine;
    });
}
describe('MemoryEngine', () => {
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        engine = yield initEngine();
    }));
    describe('init', () => {
        it('resolves with direct access to the complete in-memory store.', () => __awaiter(void 0, void 0, void 0, function* () {
            engine = new MemoryEngine_1.MemoryEngine();
            const inMemory = yield engine.init(STORE_NAME);
            expect(inMemory[STORE_NAME]).toBeDefined();
        }));
        it('writes into an existing database.', () => __awaiter(void 0, void 0, void 0, function* () {
            const TABLE_NAME = 'friends';
            const PRIMARY_KEY_CAMILLA = 'camilla';
            const PRIMARY_KEY_PETER = 'peter';
            const entityCamilla = {
                age: 25,
                name: 'Camilla',
            };
            const entityPeter = {
                age: 30,
                name: 'Peter',
            };
            const dbName = 'MyDatabase';
            const db = {
                [TABLE_NAME]: { [PRIMARY_KEY_PETER]: entityPeter },
            };
            engine = new MemoryEngine_1.MemoryEngine();
            yield engine.initWithObject(dbName, db);
            const primaryKey = yield engine.create(TABLE_NAME, PRIMARY_KEY_CAMILLA, entityCamilla);
            expect(primaryKey).toEqual(PRIMARY_KEY_CAMILLA);
            expect(engine.storeName).toBe(dbName);
            const result = yield engine.read(TABLE_NAME, PRIMARY_KEY_PETER);
            expect(result).toEqual(entityPeter);
        }));
    });
    describe('create', () => {
        Object.entries(createSpec_1.createSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
    describe('delete', () => {
        Object.entries(deleteSpec_1.deleteSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
    describe('deleteAll', () => {
        Object.entries(deleteAllSpec_1.deleteAllSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
    describe('purge', () => {
        Object.entries(purgeSpec_1.purgeSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine, initEngine));
        });
    });
    describe('readAllPrimaryKeys', () => {
        Object.entries(readAllPrimaryKeysSpec_1.readAllPrimaryKeysSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
    describe('readAll', () => {
        Object.entries(readAllSpec_1.readAllSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
    describe('read', () => {
        Object.entries(readSpec_1.readSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
    describe('updateOrCreate', () => {
        Object.entries(updateOrCreateSpec_1.updateOrCreateSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
    describe('update', () => {
        Object.entries(updateSpec_1.updateSpec).map(([description, testFunction]) => {
            it(description, () => testFunction(engine));
        });
    });
});
//# sourceMappingURL=MemoryEngine.test.js.map