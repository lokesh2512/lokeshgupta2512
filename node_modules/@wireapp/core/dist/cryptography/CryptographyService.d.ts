import { APIClient } from '@wireapp/api-client';
import { PreKey as SerializedPreKey } from '@wireapp/api-client/dist/auth/';
import { RegisteredClient } from '@wireapp/api-client/dist/client/';
import { OTRRecipients } from '@wireapp/api-client/dist/conversation/';
import { ConversationOtrMessageAddEvent } from '@wireapp/api-client/dist/event';
import { UserPreKeyBundleMap } from '@wireapp/api-client/dist/user/';
import { Cryptobox } from '@wireapp/cryptobox';
import { CRUDEngine } from '@wireapp/store-engine';
import { PayloadBundle, PayloadBundleSource } from '../conversation';
export interface MetaClient extends RegisteredClient {
    meta: {
        is_verified?: boolean;
        primary_key: string;
    };
}
export declare class CryptographyService {
    readonly apiClient: APIClient;
    private readonly storeEngine;
    private readonly logger;
    cryptobox: Cryptobox;
    private readonly database;
    constructor(apiClient: APIClient, storeEngine: CRUDEngine);
    static constructSessionId(userId: string, clientId: string): string;
    createCryptobox(): Promise<SerializedPreKey[]>;
    decrypt(sessionId: string, encodedCiphertext: string): Promise<Uint8Array>;
    private static dismantleSessionId;
    encrypt(plainText: Uint8Array, preKeyBundles: UserPreKeyBundleMap): Promise<OTRRecipients>;
    private encryptPayloadForSession;
    initCryptobox(): Promise<void>;
    deleteCryptographyStores(): Promise<boolean[]>;
    resetSession(sessionId: string): Promise<void>;
    decodeGenericMessage(otrMessage: ConversationOtrMessageAddEvent, source: PayloadBundleSource): Promise<PayloadBundle>;
}
