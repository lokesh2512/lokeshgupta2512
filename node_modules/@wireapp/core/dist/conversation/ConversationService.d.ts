/// <reference types="node" />
import { Conversation, MutedStatus, NewOTRMessage } from '@wireapp/api-client/dist/conversation/';
import { ConversationMemberLeaveEvent } from '@wireapp/api-client/dist/event/';
import { AxiosError } from 'axios';
import { AssetService, MessageTimer } from '../conversation/';
import { RemoteData } from '../conversation/content/';
import { CryptographyService } from '../cryptography/';
import { APIClient } from '@wireapp/api-client';
import { MessageBuilder } from './message/MessageBuilder';
import { CallMessage, ClearConversationMessage, ConfirmationMessage, DeleteMessage, EditedTextMessage, FileAssetAbortMessage, FileAssetMessage, FileAssetMetaDataMessage, HideMessage, ImageAssetMessage, LocationMessage, OtrMessage, PingMessage, ReactionMessage, ResetSessionMessage, TextMessage } from './message/OtrMessage';
export declare class ConversationService {
    private readonly apiClient;
    private readonly cryptographyService;
    private readonly assetService;
    readonly messageTimer: MessageTimer;
    readonly messageBuilder: MessageBuilder;
    constructor(apiClient: APIClient, cryptographyService: CryptographyService, assetService: AssetService);
    private createEphemeral;
    private getPreKeyBundle;
    private getSelfConversation;
    private sendExternalGenericMessage;
    private sendGenericMessage;
    private sendOTRMessage;
    onClientMismatch(error: AxiosError, message: NewOTRMessage, plainTextArray: Uint8Array): Promise<NewOTRMessage>;
    private sendConfirmation;
    private sendEditedText;
    private sendFileData;
    private sendFileMetaData;
    private sendFileAbort;
    private sendImage;
    private sendLocation;
    private sendPing;
    private sendReaction;
    private sendSessionReset;
    private sendCall;
    private sendText;
    clearConversation(conversationId: string, timestamp?: number | Date, messageId?: string): Promise<ClearConversationMessage>;
    deleteMessageLocal(conversationId: string, messageIdToHide: string): Promise<HideMessage>;
    deleteMessageEveryone(conversationId: string, messageIdToDelete: string, userIds?: string[]): Promise<DeleteMessage>;
    private buildLinkPreviews;
    private shouldSendAsExternal;
    leaveConversation(conversationId: string): Promise<ConversationMemberLeaveEvent>;
    leaveConversations(conversationIds?: string[]): Promise<ConversationMemberLeaveEvent[]>;
    createConversation(name: string, otherUserIds?: string | string[]): Promise<Conversation>;
    getConversations(conversationId: string): Promise<Conversation>;
    getConversations(conversationIds?: string[]): Promise<Conversation[]>;
    getAsset({ assetId, assetToken, otrKey, sha256 }: RemoteData): Promise<Buffer>;
    getUnencryptedAsset(assetId: string, assetToken?: string): Promise<ArrayBuffer>;
    addUser(conversationId: string, userId: string): Promise<string>;
    addUser(conversationId: string, userIds: string[]): Promise<string[]>;
    removeUser(conversationId: string, userId: string): Promise<string>;
    /**
     * @param payloadBundle Outgoing message
     * @param userIds Only send message to specified user IDs
     * @returns Sent message
     */
    send(payloadBundle: OtrMessage, userIds?: string[]): Promise<CallMessage | ConfirmationMessage | EditedTextMessage | FileAssetAbortMessage | FileAssetMessage | FileAssetMetaDataMessage | ImageAssetMessage | LocationMessage | PingMessage | ReactionMessage | ResetSessionMessage | TextMessage>;
    sendTypingStart(conversationId: string): Promise<void>;
    sendTypingStop(conversationId: string): Promise<void>;
    setConversationMutedStatus(conversationId: string, status: MutedStatus, muteTimestamp: number | Date): Promise<void>;
    toggleArchiveConversation(conversationId: string, archived: boolean, archiveTimestamp?: number | Date): Promise<void>;
}
