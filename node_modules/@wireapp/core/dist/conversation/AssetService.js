"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const AssetCryptography = __importStar(require("../cryptography/AssetCryptography.node"));
class AssetService {
    constructor(apiClient) {
        this.apiClient = apiClient;
    }
    postAsset(buffer, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { cipherText, keyBytes, sha256 } = yield AssetCryptography.encryptAsset(buffer);
            const { key, token } = yield this.apiClient.asset.api.postAsset(new Uint8Array(cipherText), options);
            return {
                cipherText,
                key,
                keyBytes,
                sha256,
                token,
            };
        });
    }
    uploadImageAsset(image, options) {
        return this.postAsset(image.data, options);
    }
    uploadFileAsset(file, options) {
        return this.postAsset(file.data, options);
    }
}
exports.AssetService = AssetService;
//# sourceMappingURL=AssetService.js.map