"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const APIClient_1 = require("../APIClient");
const ClientType_1 = require("../client/ClientType");
describe('AuthAPI', () => {
    const apiClient = new APIClient_1.APIClient();
    it('sets the client to permanent', () => __awaiter(void 0, void 0, void 0, function* () {
        const data = {
            clientType: ClientType_1.ClientType.PERMANENT,
            email: 'email@example.com',
            password: 'email@example.com',
        };
        spyOn(apiClient.transport.http, 'sendJSON').and.returnValue(Promise.resolve({
            config: {},
            data: '',
            headers: {},
            status: 200,
            statusText: 'OK',
        }));
        yield apiClient.auth.api.postLogin(data);
        expect(apiClient.transport.http.sendJSON).toHaveBeenCalledWith(jasmine.objectContaining({
            data: {
                clientType: undefined,
                email: data.email,
                password: data.password,
            },
            params: {
                persist: true,
            },
        }));
    }));
    it('sets the client to temporary', () => __awaiter(void 0, void 0, void 0, function* () {
        const data = {
            clientType: ClientType_1.ClientType.TEMPORARY,
            email: 'email@example.com',
            password: 'email@example.com',
        };
        spyOn(apiClient.transport.http, 'sendJSON').and.returnValue(Promise.resolve({
            config: {},
            data: '',
            headers: {},
            status: 200,
            statusText: 'OK',
        }));
        yield apiClient.auth.api.postLogin(data);
        expect(apiClient.transport.http.sendJSON).toHaveBeenCalledWith(jasmine.objectContaining({
            data: {
                clientType: undefined,
                email: data.email,
                password: data.password,
            },
            params: {
                persist: false,
            },
        }));
    }));
});
//# sourceMappingURL=AuthAPI.test.node.js.map