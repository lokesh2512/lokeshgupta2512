"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable dot-notation */
const APIClient_1 = require("./APIClient");
const client_1 = require("./client");
describe('Client', () => {
    describe('"connect"', () => {
        it('processes WebSocket messages when executed in a web browser.', () => __awaiter(void 0, void 0, void 0, function* () {
            const apiClient = new APIClient_1.APIClient({ urls: APIClient_1.APIClient.BACKEND.STAGING });
            const accessTokenData = {
                access_token: 'iJCRCjc8oROO-dkrkqCXOade997oa8Jhbz6awMUQPBQo80VenWqp_oNvfY6AnU5BxEsdDPOBfBP-uz_b0gAKBQ==.v=1.k=1.d=1498600993.t=a.l=.u=aaf9a833-ef30-4c22-86a0-9adc8a15b3b4.c=15037015562284012115',
                expires_in: 900,
                token_type: 'Bearer',
                user: 'aaf9a833-ef30-4c22-86a0-9adc8a15b3b4',
            };
            const dataBuffer = new TextEncoder().encode('{}').buffer;
            const message = new MessageEvent('message', { data: dataBuffer });
            apiClient.context = {
                clientId: undefined,
                clientType: client_1.ClientType.TEMPORARY,
                userId: 'userId',
            };
            apiClient['accessTokenStore'].accessToken = accessTokenData;
            const promise = apiClient.connect();
            apiClient.transport.ws['socket']['internalOnMessage'](message);
            const socket = yield promise;
            expect(socket).toBeDefined();
            apiClient.transport.ws['socket']['internalOnMessage'](message);
        }));
    });
});
//# sourceMappingURL=APIClient.test.browser.js.map