"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ConversationError_1 = require("../conversation/ConversationError");
const UserError_1 = require("../user/UserError");
const BackendErrorLabel_1 = require("./BackendErrorLabel");
const BackendErrorMapper_1 = require("./BackendErrorMapper");
describe('BackendErrorMapper', () => {
    describe('"map"', () => {
        it('maps backend error payloads into error objects', () => {
            const userIdError = {
                code: 400,
                label: BackendErrorLabel_1.BackendErrorLabel.CLIENT_ERROR,
                message: "[path] 'usr' invalid: Failed reading: Invalid UUID",
                name: '',
            };
            const userError = BackendErrorMapper_1.BackendErrorMapper.map(userIdError);
            expect(userError).toEqual(jasmine.any(UserError_1.UserIsUnknownError));
            const conversationIdError = {
                code: 400,
                label: BackendErrorLabel_1.BackendErrorLabel.CLIENT_ERROR,
                message: "[path] 'cnv' invalid: Failed reading: Invalid UUID",
                name: '',
            };
            const conversationError = BackendErrorMapper_1.BackendErrorMapper.map(conversationIdError);
            expect(conversationError).toEqual(jasmine.any(ConversationError_1.ConversationIsUnknownError));
        });
    });
});
//# sourceMappingURL=BackendErrorMapper.test.node.js.map