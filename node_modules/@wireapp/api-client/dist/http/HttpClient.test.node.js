"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const HttpClient_1 = require("./HttpClient");
const StatusCode_1 = require("./StatusCode");
describe('HttpClient', () => {
    describe('"_sendRequest"', () => {
        it('retries on 401 unauthorized error', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockedAccessTokenStore = {
                accessToken: {
                    access_token: 'iJCRCjc8oROO-dkrkqCXOade997oa8Jhbz6awMUQPBQo80VenWqp_oNvfY6AnU5BxEsdDPOBfBP-uz_b0gAKBQ==.v=1.k=1.d=1498600993.t=a.l=.u=aaf9a833-ef30-4c22-86a0-9adc8a15b3b4.c=15037015562284012115',
                    expires_in: 900,
                    token_type: 'Bearer',
                    user: 'aaf9a833-ef30-4c22-86a0-9adc8a15b3b4',
                },
            };
            const client = new HttpClient_1.HttpClient('https://test.zinfra.io', mockedAccessTokenStore);
            const requestSpy = spyOn(axios_1.default, 'request');
            // eslint-disable-next-line prefer-promise-reject-errors
            requestSpy.and.returnValue(Promise.reject({ response: { status: StatusCode_1.StatusCode.UNAUTHORIZED } }));
            client.refreshAccessToken = () => {
                requestSpy.and.returnValue(Promise.resolve());
                return Promise.resolve(mockedAccessTokenStore.accessToken.access_token);
            };
            yield client._sendRequest({});
        }));
        it('does not retry on 403 forbidden error', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockedAccessTokenStore = {
                accessToken: {
                    access_token: 'iJCRCjc8oROO-dkrkqCXOade997oa8Jhbz6awMUQPBQo80VenWqp_oNvfY6AnU5BxEsdDPOBfBP-uz_b0gAKBQ==.v=1.k=1.d=1498600993.t=a.l=.u=aaf9a833-ef30-4c22-86a0-9adc8a15b3b4.c=15037015562284012115',
                    expires_in: 900,
                    token_type: 'Bearer',
                    user: 'aaf9a833-ef30-4c22-86a0-9adc8a15b3b4',
                },
            };
            const errorMessage = 'cookie invalid';
            const client = new HttpClient_1.HttpClient('https://test.zinfra.io', mockedAccessTokenStore);
            spyOn(axios_1.default, 'request').and.returnValue(
            // eslint-disable-next-line prefer-promise-reject-errors
            Promise.reject({
                response: {
                    data: {
                        code: StatusCode_1.StatusCode.FORBIDDEN,
                        label: 'invalid-credentials',
                        message: errorMessage,
                    },
                    status: StatusCode_1.StatusCode.FORBIDDEN,
                },
            }));
            client.refreshAccessToken = () => {
                return Promise.reject(new Error('Should not refresh access token'));
            };
            try {
                yield client._sendRequest({});
                fail();
            }
            catch (error) {
                expect(error.message).toBe(errorMessage);
            }
        }));
    });
});
//# sourceMappingURL=HttpClient.test.node.js.map