"use strict";
/*
 * Wire
 * Copyright (C) 2018 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("../shims/node/buffer");
const random_1 = require("../shims/node/random");
const AssetRetentionPolicy_1 = require("./AssetRetentionPolicy");
const AssetUtil_1 = require("./AssetUtil");
class AssetAPI {
    constructor(client) {
        this.client = client;
    }
    getAsset(assetId, token) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!AssetUtil_1.isValidAssetId(assetId)) {
                throw new TypeError(`Expected asset ID "${assetId}" to only contain alphanumeric values and dashes.`);
            }
            if (token && !AssetUtil_1.isValidToken(token)) {
                throw new TypeError(`Expected token "${token.substr(0, 5)}..." (redacted) to be base64 encoded string.`);
            }
            const config = {
                method: 'get',
                params: {},
                responseType: 'arraybuffer',
                url: `${AssetAPI.ASSET_URL}/${assetId}`,
            };
            if (token) {
                config.params.asset_token = token;
            }
            const response = yield this.client.sendRequest(config, true);
            return response.data;
        });
    }
    postAsset(asset, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const BOUNDARY = `Frontier${random_1.unsafeAlphanumeric()}`;
            const metadata = JSON.stringify(Object.assign({ public: true, retention: AssetRetentionPolicy_1.AssetRetentionPolicy.PERSISTENT }, options));
            let body = '';
            body += `--${BOUNDARY}\r\n`;
            body += 'Content-Type: application/json;charset=utf-8\r\n';
            body += `Content-length: ${metadata.length}\r\n`;
            body += '\r\n';
            body += `${metadata}\r\n`;
            body += `--${BOUNDARY}\r\n`;
            body += 'Content-Type: application/octet-stream\r\n';
            body += `Content-length: ${asset.length}\r\n`;
            body += `Content-MD5: ${buffer_1.base64MD5FromBuffer(asset.buffer)}\r\n`;
            body += '\r\n';
            const footer = `\r\n--${BOUNDARY}--\r\n`;
            const response = yield this.client.sendRequest({
                data: buffer_1.concatToBuffer(body, asset, footer),
                headers: {
                    'Content-Type': `multipart/mixed; boundary=${BOUNDARY}`,
                },
                method: 'post',
                url: AssetAPI.ASSET_URL,
            });
            return response.data;
        });
    }
}
exports.AssetAPI = AssetAPI;
AssetAPI.ASSET_URL = '/assets/v3';
//# sourceMappingURL=AssetAPI.js.map