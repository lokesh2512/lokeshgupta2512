"use strict";
/*
 * Wire
 * Copyright (C) 2019 Wire Swiss GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses/.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Permissions_1 = require("./Permissions");
const Role_1 = require("./Role");
describe('Role', () => {
    describe('hasPermissions', () => {
        it('INVALID', () => {
            const permissions = Role_1.roleToPermissions('INVALID');
            expect(permissions).toEqual(Permissions_1.combinePermissions([]));
        });
        it('MEMBER', () => {
            const permissions = Role_1.roleToPermissions(Role_1.Role.MEMBER);
            expect(permissions).toEqual(Permissions_1.combinePermissions([
                Permissions_1.Permissions.ADD_CONVERSATION_MEMBER,
                Permissions_1.Permissions.CREATE_CONVERSATION,
                Permissions_1.Permissions.DELETE_CONVERSATION,
                Permissions_1.Permissions.GET_MEMBER_PERMISSIONS,
                Permissions_1.Permissions.GET_TEAM_CONVERSATIONS,
                Permissions_1.Permissions.REMOVE_CONVERSATION_MEMBER,
            ]));
        });
        it('ADMIN', () => {
            const permissions = Role_1.roleToPermissions(Role_1.Role.ADMIN);
            expect(permissions).toEqual(Permissions_1.combinePermissions([
                Permissions_1.Permissions.ADD_CONVERSATION_MEMBER,
                Permissions_1.Permissions.ADD_TEAM_MEMBER,
                Permissions_1.Permissions.CREATE_CONVERSATION,
                Permissions_1.Permissions.DELETE_CONVERSATION,
                Permissions_1.Permissions.GET_MEMBER_PERMISSIONS,
                Permissions_1.Permissions.GET_TEAM_CONVERSATIONS,
                Permissions_1.Permissions.REMOVE_CONVERSATION_MEMBER,
                Permissions_1.Permissions.REMOVE_TEAM_MEMBER,
                Permissions_1.Permissions.SET_MEMBER_PERMISSIONS,
                Permissions_1.Permissions.SET_TEAM_DATA,
            ]));
        });
        it('OWNER', () => {
            const permissions = Role_1.roleToPermissions(Role_1.Role.OWNER);
            expect(permissions).toEqual(Permissions_1.combinePermissions([
                Permissions_1.Permissions.ADD_CONVERSATION_MEMBER,
                Permissions_1.Permissions.ADD_TEAM_MEMBER,
                Permissions_1.Permissions.CREATE_CONVERSATION,
                Permissions_1.Permissions.DELETE_CONVERSATION,
                Permissions_1.Permissions.DELETE_TEAM,
                Permissions_1.Permissions.GET_BILLING,
                Permissions_1.Permissions.GET_MEMBER_PERMISSIONS,
                Permissions_1.Permissions.GET_TEAM_CONVERSATIONS,
                Permissions_1.Permissions.REMOVE_CONVERSATION_MEMBER,
                Permissions_1.Permissions.REMOVE_TEAM_MEMBER,
                Permissions_1.Permissions.SET_BILLING,
                Permissions_1.Permissions.SET_MEMBER_PERMISSIONS,
                Permissions_1.Permissions.SET_TEAM_DATA,
            ]));
        });
    });
    describe('isPartner', () => {
        it('OWNER is false', () => {
            expect(Role_1.isPartner({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.OWNER) })).toBe(false);
        });
        it('ADMIN is false', () => {
            expect(Role_1.isPartner({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.ADMIN) })).toBe(false);
        });
        it('MEMBER is false', () => {
            expect(Role_1.isPartner({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.MEMBER) })).toBe(false);
        });
        it('EXTERNAL is true', () => {
            expect(Role_1.isPartner({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.EXTERNAL) })).toBe(true);
        });
        it('invalid is false', () => {
            expect(Role_1.isPartner({ copy: 0, self: Role_1.roleToPermissions('invalid') })).toBe(false);
        });
        it('0 is false', () => {
            expect(Role_1.isPartner({ copy: 0, self: 0 })).toBe(false);
        });
        it('-1 is false', () => {
            expect(Role_1.isPartner({ copy: 0, self: -1 })).toBe(false);
        });
        it('string is false', () => {
            expect(Role_1.isPartner({ copy: 0, self: 'MEMBER' })).toBe(false);
        });
        it('empty permissionsData is false', () => {
            expect(Role_1.isPartner({})).toBe(false);
        });
        it('undefined permissionsData is false', () => {
            expect(Role_1.isPartner(undefined)).toBe(false);
        });
    });
    describe('isMember', () => {
        it('OWNER is false', () => {
            expect(Role_1.isMember({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.OWNER) })).toBe(false);
        });
        it('ADMIN is false', () => {
            expect(Role_1.isMember({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.ADMIN) })).toBe(false);
        });
        it('MEMBER is true', () => {
            expect(Role_1.isMember({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.MEMBER) })).toBe(true);
        });
        it('EXTERNAL is false', () => {
            expect(Role_1.isMember({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.EXTERNAL) })).toBe(false);
        });
        it('invalid is false', () => {
            expect(Role_1.isMember({ copy: 0, self: Role_1.roleToPermissions('invalid') })).toBe(false);
        });
        it('0 is false', () => {
            expect(Role_1.isMember({ copy: 0, self: 0 })).toBe(false);
        });
        it('-1 is false', () => {
            expect(Role_1.isMember({ copy: 0, self: -1 })).toBe(false);
        });
        it('string is false', () => {
            expect(Role_1.isMember({ copy: 0, self: 'MEMBER' })).toBe(false);
        });
        it('empty permissionsData is false', () => {
            expect(Role_1.isMember({})).toBe(false);
        });
        it('undefined permissionsData is false', () => {
            expect(Role_1.isMember(undefined)).toBe(false);
        });
    });
    describe('isAdmin', () => {
        it('OWNER is false', () => {
            expect(Role_1.isAdmin({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.OWNER) })).toBe(false);
        });
        it('ADMIN is true', () => {
            expect(Role_1.isAdmin({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.ADMIN) })).toBe(true);
        });
        it('MEMBER is false', () => {
            expect(Role_1.isAdmin({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.MEMBER) })).toBe(false);
        });
        it('EXTERNAL is false', () => {
            expect(Role_1.isAdmin({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.EXTERNAL) })).toBe(false);
        });
        it('invalid is false', () => {
            expect(Role_1.isAdmin({ copy: 0, self: Role_1.roleToPermissions('invalid') })).toBe(false);
        });
        it('0 is false', () => {
            expect(Role_1.isAdmin({ copy: 0, self: 0 })).toBe(false);
        });
        it('-1 is false', () => {
            expect(Role_1.isAdmin({ copy: 0, self: -1 })).toBe(false);
        });
        it('string is false', () => {
            expect(Role_1.isAdmin({ copy: 0, self: 'ADMIN' })).toBe(false);
        });
        it('empty permissionsData is false', () => {
            expect(Role_1.isAdmin({})).toBe(false);
        });
        it('undefined permissionsData is false', () => {
            expect(Role_1.isAdmin(undefined)).toBe(false);
        });
    });
    describe('isOwner', () => {
        it('OWNER is true', () => {
            expect(Role_1.isOwner({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.OWNER) })).toBe(true);
        });
        it('ADMIN is false', () => {
            expect(Role_1.isOwner({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.ADMIN) })).toBe(false);
        });
        it('MEMBER is false', () => {
            expect(Role_1.isOwner({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.MEMBER) })).toBe(false);
        });
        it('EXTERNAL is false', () => {
            expect(Role_1.isOwner({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.EXTERNAL) })).toBe(false);
        });
        it('invalid is false', () => {
            expect(Role_1.isOwner({ copy: 0, self: Role_1.roleToPermissions('invalid') })).toBe(false);
        });
        it('0 is false', () => {
            expect(Role_1.isOwner({ copy: 0, self: 0 })).toBe(false);
        });
        it('-1 is false', () => {
            expect(Role_1.isOwner({ copy: 0, self: -1 })).toBe(false);
        });
        it('string is false', () => {
            expect(Role_1.isOwner({ copy: 0, self: 'OWNER' })).toBe(false);
        });
        it('empty permissionsData is false', () => {
            expect(Role_1.isOwner({})).toBe(false);
        });
        it('undefined permissionsData is false', () => {
            expect(Role_1.isOwner(undefined)).toBe(false);
        });
    });
    describe('isAtLeastPartner', () => {
        it('OWNER is true', () => {
            expect(Role_1.isAtLeastPartner({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.OWNER) })).toBe(true);
        });
        it('ADMIN is true', () => {
            expect(Role_1.isAtLeastPartner({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.ADMIN) })).toBe(true);
        });
        it('MEMBER is true', () => {
            expect(Role_1.isAtLeastPartner({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.MEMBER) })).toBe(true);
        });
        it('EXTERNAL is true', () => {
            expect(Role_1.isAtLeastPartner({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.EXTERNAL) })).toBe(true);
        });
        it('invalid is false', () => {
            expect(Role_1.isAtLeastPartner({ copy: 0, self: Role_1.roleToPermissions('invalid') })).toBe(false);
        });
        it('Unknown above is false', () => {
            expect(Role_1.isAtLeastPartner({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.EXTERNAL) + 1234 })).toBe(false);
        });
        it('0 is false', () => {
            expect(Role_1.isAtLeastPartner({ copy: 0, self: 0 })).toBe(false);
        });
        it('-1 is false', () => {
            expect(Role_1.isAtLeastPartner({ copy: 0, self: -1 })).toBe(false);
        });
        it('string is false', () => {
            expect(Role_1.isAtLeastPartner({ copy: 0, self: 'OWNER' })).toBe(false);
        });
        it('empty permissionsData is false', () => {
            expect(Role_1.isAtLeastPartner({})).toBe(false);
        });
        it('undefined permissionsData is false', () => {
            expect(Role_1.isAtLeastPartner(undefined)).toBe(false);
        });
    });
    describe('isAtLeastMember', () => {
        it('OWNER is true', () => {
            expect(Role_1.isAtLeastMember({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.OWNER) })).toBe(true);
        });
        it('ADMIN is true', () => {
            expect(Role_1.isAtLeastMember({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.ADMIN) })).toBe(true);
        });
        it('MEMBER is true', () => {
            expect(Role_1.isAtLeastMember({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.MEMBER) })).toBe(true);
        });
        it('EXTERNAL is false', () => {
            expect(Role_1.isAtLeastMember({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.EXTERNAL) })).toBe(false);
        });
        it('invalid is false', () => {
            expect(Role_1.isAtLeastMember({ copy: 0, self: Role_1.roleToPermissions('invalid') })).toBe(false);
        });
        it('Unknown above is false', () => {
            expect(Role_1.isAtLeastMember({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.MEMBER) + 1234 })).toBe(false);
        });
        it('0 is false', () => {
            expect(Role_1.isAtLeastMember({ copy: 0, self: 0 })).toBe(false);
        });
        it('-1 is false', () => {
            expect(Role_1.isAtLeastMember({ copy: 0, self: -1 })).toBe(false);
        });
        it('string is false', () => {
            expect(Role_1.isAtLeastMember({ copy: 0, self: 'OWNER' })).toBe(false);
        });
        it('empty permissionsData is false', () => {
            expect(Role_1.isAtLeastMember({})).toBe(false);
        });
        it('undefined permissionsData is false', () => {
            expect(Role_1.isAtLeastMember(undefined)).toBe(false);
        });
    });
    describe('isAtLeastAdmin', () => {
        it('OWNER is true', () => {
            expect(Role_1.isAtLeastAdmin({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.OWNER) })).toBe(true);
        });
        it('ADMIN is true', () => {
            expect(Role_1.isAtLeastAdmin({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.ADMIN) })).toBe(true);
        });
        it('MEMBER is false', () => {
            expect(Role_1.isAtLeastAdmin({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.MEMBER) })).toBe(false);
        });
        it('EXTERNAL is false', () => {
            expect(Role_1.isAtLeastAdmin({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.EXTERNAL) })).toBe(false);
        });
        it('invalid is false', () => {
            expect(Role_1.isAtLeastAdmin({ copy: 0, self: Role_1.roleToPermissions('invalid') })).toBe(false);
        });
        it('Unknown above is false', () => {
            expect(Role_1.isAtLeastAdmin({ copy: 0, self: Role_1.roleToPermissions(Role_1.Role.ADMIN) + 1234 })).toBe(false);
        });
        it('0 is false', () => {
            expect(Role_1.isAtLeastAdmin({ copy: 0, self: 0 })).toBe(false);
        });
        it('-1 is false', () => {
            expect(Role_1.isAtLeastAdmin({ copy: 0, self: -1 })).toBe(false);
        });
        it('string is false', () => {
            expect(Role_1.isAtLeastAdmin({ copy: 0, self: 'OWNER' })).toBe(false);
        });
        it('empty permissionsData is false', () => {
            expect(Role_1.isAtLeastAdmin({})).toBe(false);
        });
        it('undefined permissionsData is false', () => {
            expect(Role_1.isAtLeastAdmin(undefined)).toBe(false);
        });
    });
});
//# sourceMappingURL=Role.test.js.map